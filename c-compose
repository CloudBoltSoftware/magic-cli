#!/usr/bin/env python
# Run docker-compose or a script from the docker-compose scripts directory.
# ^ help text when running `c --help`
import argparse
import os
import stat
import subprocess
import sys

HOME = os.environ['HOME']
CLOUDBOLT_DIR = os.environ.get('CB', os.path.join(HOME, 'cloudbolt'))
DOCKER_COMPOSE_DIR = os.path.join(CLOUDBOLT_DIR, 'appliances/docker-compose')
SCRIPTS_DIR = os.path.join(DOCKER_COMPOSE_DIR, 'scripts')

executable = stat.S_IEXEC | stat.S_IXGRP | stat.S_IXOTH
scripts = {}
for filename in os.listdir(SCRIPTS_DIR):
    command = os.path.splitext(filename)[0]  # remove the file extension
    filepath = os.path.join(SCRIPTS_DIR, filename)  # get the full path
    # Add to avaialble commands if path is a file and is executable
    if os.path.isfile(filepath) and os.stat(filepath).st_mode & executable:
        scripts[command] = filepath


def main():
    parser = argparse.ArgumentParser(description=(
        'Runs docker-compose with the provided args, or a script from '
        'docker-compose/scripts.')
    )
    parser.add_argument(
        '--script', dest='script', choices=scripts.keys(),
        help='run the specified script instead of a docker-compose command'
    )
    parsed_args, extra_args = parser.parse_known_args()

    script_name = parsed_args.script
    if script_name is not None:
        script_path = scripts[script_name]
        return subprocess.call(['python', script_path] + extra_args)
    elif not extra_args:
        parser.print_help()
        return 0
    else:
        orig_dir = os.getcwd()
        os.chdir(DOCKER_COMPOSE_DIR)
        rc = subprocess.call(['docker-compose'] + extra_args)
        os.chdir(orig_dir)
        return rc


if __name__ == '__main__':
    rc = main()
    sys.exit(rc)
